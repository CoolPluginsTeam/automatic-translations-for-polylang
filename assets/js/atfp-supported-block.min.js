class BlockFilterSorter{constructor(){this.tabsSortBy=document.getElementById("atfp-sortby-tab"),this.filterSelect=document.getElementById("atfp-blocks-filter"),this.searchInput=document.getElementById("atfp-blocks-search"),this.tableBody=document.querySelector(".atfp-supported-blocks-table tbody"),this.tableBody&&this.atfpDataTable()}filterAndSortData(){const selectedFilter=this.filterSelect.value;let selectedTab=this.tabsSortBy.value,searchValue=this.searchInput.value.toLowerCase();searchValue=searchValue.trim();let allRows=this.tableBody.querySelectorAll("tr"),filteredRows=allRows,sortedRows=[],index=1;if("all"!==selectedFilter?(this.tabsSortBy.disabled=!0,selectedTab="name",filteredRows=[...filteredRows].filter(row=>row.dataset.blockStatus===selectedFilter)):this.tabsSortBy.disabled=!1,searchValue&&(filteredRows=[...filteredRows].filter(row=>{const blockName=row.children[1].textContent.toLowerCase(),blockTitle=row.children[2].textContent.toLowerCase();return blockName.includes(searchValue)||blockTitle.includes(searchValue)})),"name"===selectedTab)sortedRows=this.sortByName(allRows);else if("supported"===selectedTab)sortedRows=this.sortBySupported(allRows);else{if("unsupported"!==selectedTab)return void console.warn("Invalid filter value:",selectedTab);sortedRows=this.sortByUnsupported(allRows)}this.tableBody.querySelectorAll("tr").forEach(row=>row.classList.add("hidden")),this.tableBody.innerHTML="",filteredRows.forEach(row=>{row.children[1].textContent=row.children[1].textContent.replace(/<span class="atfp-search-highlight">(.*?)<\/span>/g,"$1"),row.children[2].textContent=row.children[2].textContent.replace(/<span class="atfp-search-highlight">(.*?)<\/span>/g,"$1"),row.classList.remove("hidden")}),this.tableBody.innerHTML="",sortedRows.forEach((row,_)=>{if(this.tableBody.appendChild(row),!row.classList.contains("hidden")&&(row.children[0].textContent=index,index++,""!=searchValue)){const searchValueRegex=new RegExp(`(${searchValue})`,"gi");row.children[1].innerHTML=row.children[1].textContent.replace(searchValueRegex,'<span class="atfp-search-highlight">$1</span>'),row.children[2].innerHTML=row.children[2].textContent.replace(searchValueRegex,'<span class="atfp-search-highlight">$1</span>')}})}sortByName(rows){return[...rows].sort((a,b)=>{const nameA=a.children[1].textContent.toLowerCase(),nameB=b.children[1].textContent.toLowerCase();return nameA.localeCompare(nameB)})}sortBySupported(rows){const supportedBlocks=[],otherBlocks=[];return rows.forEach(row=>{"supported"===row.dataset.blockStatus?supportedBlocks.push(row):otherBlocks.push(row)}),[...supportedBlocks,...otherBlocks]}sortByUnsupported(rows){return[...rows].sort((a,b)=>{const statusA=a.dataset.blockStatus,statusB=b.dataset.blockStatus;return statusA===statusB?0:"unsupported"===statusA?-1:1})}attachEventListeners(){this.tabsSortBy.addEventListener("change",()=>this.filterAndSortData()),this.filterSelect.addEventListener("change",()=>this.filterAndSortData()),this.searchInput.addEventListener("input",()=>this.filterAndSortData())}atfpDataTable(){if(this.tableBody){const atfpDataTable=new DataTable("#atfp-supported-blocks-table"),filterData=atfpDataTable.columns([3]).data().flatten().filter(value=>"Supported"===value);console.log(atfpDataTable),atfpDataTable.row(filterData).draw(),atfpDataTable.rows(filterData).draw(),atfpDataTable.data(filterData).draw()}}}window.addEventListener("load",()=>{new BlockFilterSorter});